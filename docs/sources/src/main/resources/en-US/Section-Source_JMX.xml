<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "Application_User_Guide.ent">
%BOOK_ENTITIES;
]>

<section id="source_jmx">
	<title>JMX Source</title>
	<para>
		<acronym>JMX</acronym> part of &THIS.APPLICATION; Application is responsible for initiating rules engine and exposing management methods. 
		Single <acronym>JMX</acronym> bean is defined with <acronym>XML</acronym> descriptor file <filename>jboss-beans.xml</filename>. Descriptor content looks as follows:
	</para>
	<programlisting language="XML" role="XML"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>

<deployment xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="urn:jboss:bean-deployer:2.0 bean-deployer_2_0.xsd"
	xmlns="urn:jboss:bean-deployer:2.0">

	<bean name="RulesService" class="org.mobicents.ussdgateway.rules.RulesService">
		<annotation>@org.jboss.aop.microcontainer.aspects.jmx.JMX(
			name="org.mobicents.ussdgateway:service=RulesService"
			,exposedInterface=org.mobicents.ussdgateway.rules.RulesServiceMBean.class
			,registerDirectly=true)
		</annotation>
	</bean>
</deployment>
	]]>
	</programlisting>

	<para><acronym>JMX</acronym> interface is defined as follows: </para>
	
	<programlisting language="Java" role="JAVA"><![CDATA[
package org.mobicents.ussdgateway.rules;

import javax.naming.NamingException;

/**
 * 
 * @author amit bhayani
 *
 */
public interface RulesServiceMBean  extends org.jboss.system.ServiceMBean {
	]]><co id="example.jmx.iface.co1"/><![CDATA[
	String getJndiName();
    void setJndiName(String jndiName) throws NamingException;
    
    ]]><co id="example.jmx.iface.co2"/><![CDATA[
    void startService() throws Exception;
    void stopService() throws Exception;

}
	]]>
	</programlisting>
	<para>It defines following:</para>
	<calloutlist>
		<callout arearefs="example.jmx.iface.co1">
				<para>management method. This method controls <acronym>JNDI</acronym> name under which rule engine is made available to <acronym>SLEE</acronym> Service</para>
			</callout>
			<callout arearefs="example.jmx.iface.co2">
				<para>regular lifecycle methods</para>
			</callout>
	</calloutlist>
	<para>
	 Implementation of above interface fulfills defined contracts in following way: 
	</para>
	<variablelist>
		<varlistentry>
		<term>void startService() throws Exception</term>
		<listitem>
			<para></para>
			<programlisting language="Java" role="JAVA"><![CDATA[
public void startService() throws Exception {
]]><co id="example.jmx.impl1.co1"/><![CDATA[
		setupRule();
]]><co id="example.jmx.impl1.co2"/><![CDATA[
		rebind();
		
		this.logger.info("Started Rules Service");
}

private void setupRule() {
]]><co id="example.jmx.impl1.co3"/><![CDATA[
		Resource resource = ResourceFactory.newUrlResource(CHANGESET_FILE_PATH);
]]><co id="example.jmx.impl1.co4"/><![CDATA[
		kagent = KnowledgeAgentFactory.newKnowledgeAgent("UssdGatewayAgent");
		kagent.applyChangeSet(resource);

		ResourceFactory.getResourceChangeNotifierService().start();
		ResourceFactory.getResourceChangeScannerService().start();


}
private void rebind() throws NamingException {

		InitialContext rootCtx = new InitialContext();
		// Get the parent context into which we are to bind
		Name fullName = rootCtx.getNameParser("").parse(jndiName);
		System.out.println("fullName=" + fullName);
		Name parentName = fullName;
		if (fullName.size() > 1)
			parentName = fullName.getPrefix(fullName.size() - 1);
		else
			parentName = new CompositeName();
		Context parentCtx = createContext(rootCtx, parentName);
		Name atomName = fullName.getSuffix(fullName.size() - 1);
		String atom = atomName.get(0);
		NonSerializableFactory.rebind(parentCtx, atom, kagent);
}

private static Context createContext(Context rootContext, Name name)
			throws NamingException {
		Context subctx = rootContext;
		for (int n = 0; n < name.size(); n++) {
			String atom = name.get(n);
			try {
				Object obj = subctx.lookup(atom);
				subctx = (Context) obj;
			} catch (NamingException e) { // No binding exists, create a
				// subcontext
				subctx = subctx.createSubcontext(atom);
			}
		}

		return subctx;
}
			]]>
			</programlisting>
			<calloutlist>
				<callout arearefs="example.jmx.impl1.co1">
					<para>load rules into engine</para>
				</callout>
				<callout arearefs="example.jmx.impl1.co2">
					<para>bind rule engine to specified <acronym>JNDI</acronym> name</para>
				</callout>
				<callout arearefs="example.jmx.impl1.co3">
					<para>load <literal>ChangeSet</literal> as rule resource</para>
				</callout>
				<callout arearefs="example.jmx.impl1.co4">
					<para>create rule engine and initiate it</para>
				</callout>
			</calloutlist>
		</listitem>
		</varlistentry>
		<varlistentry>
		<term></term>
		<listitem>
			<para>void stopService() throws Exception</para>
			<programlisting language="Java" role="JAVA"><![CDATA[
	public void stopService() throws Exception {
	]]><co id="example.jmx.impl2.co1"/><![CDATA[
		unbind(jndiName);
	}
			]]>
			</programlisting>
			<calloutlist>
				<callout arearefs="example.jmx.impl2.co1">
					<para>unbind rule engine from <acronym>JNDI</acronym> </para>
				</callout>
				
			</calloutlist>
		</listitem>
		</varlistentry>
		<varlistentry>
		<term></term>
		<listitem>
			<para>void setJndiName(String jndiName) throws NamingException</para>
			<programlisting language="Java" role="JAVA"><![CDATA[
public void setJndiName(String jndiName) throws NamingException {
	]]><co id="example.jmx.impl3.co1"/><![CDATA[
		String oldName = this.jndiName;
		this.jndiName = jndiName;
		]]><co id="example.jmx.impl3.co2"/><![CDATA[
		if (getState() == STARTED) {
			unbind(oldName);
			try {
				rebind();
			} catch (Exception e) {
				NamingException ne = new NamingException(
						"Failed to update jndiName");
				ne.setRootCause(e);
				throw ne;
			}
		}

	}
			]]>
			</programlisting>
			<calloutlist>
				<callout arearefs="example.jmx.impl3.co1">
					<para>set property and retain old value</para>
				</callout>
				<callout arearefs="example.jmx.impl3.co1">
					<para>rebind rule engine in <acronym>JNDI</acronym> in case bean is running</para>
				</callout>
			</calloutlist>
		</listitem>
		</varlistentry>
	</variablelist>

	<para>
		<acronym>JMX</acronym> bean loads change set file <filename>USSDGatewayChangeSet.xml</filename>. This file controls how rules set is loaded and maintained by rule engine.
		Please refer to <xref linkend="setup_rule"/> for details.
	</para>
</section>	