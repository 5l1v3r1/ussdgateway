<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "Application_User_Guide.ent">
%BOOK_ENTITIES;
]>

<section id="source_slee">
	<title>SLEE Service Source</title>
	<para>

	</para>
	<section id="source_slee_service">
		<title>Service descriptor</title>
		<para>&THIS.PLATFORM; &THIS.APPLICATION;
			Application is build with single
			<acronym>SLEE</acronym>
			service. Service is defined with single
			<acronym>XML</acronym>
			descriptor. Descriptor file name is
			<filename>callsbb-service.xml</filename>
			. It contains following information:
		</para>
		<programlisting language="XML" role="XML"><![CDATA[
<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE service-xml PUBLIC "-//Sun Microsystems, Inc.//DTD JAIN SLEE Service 1.1//EN"
                             "http://java.sun.com/dtd/slee-service-xml_1_1.dtd">
<service-xml>
	<service> ]]><co id="example.slee.service1.co1" /><![CDATA[
		<service-name>mobicents-ussdgateway</service-name>
		<service-vendor>org.mobicents</service-vendor>
		<service-version>1.0</service-version>
		<root-sbb>]]><co id="example.slee.service1.co2" /><![CDATA[
			<sbb-name>ParentSbb</sbb-name>
			<sbb-vendor>org.mobicents</sbb-vendor>
			<sbb-version>1.0</sbb-version>
		</root-sbb>]]><co id="example.slee.service1.co3" /><![CDATA[
		<default-priority>50</default-priority>
	</service>
</service-xml>
	]]>
	</programlisting>
		<calloutlist>
			<callout arearefs="example.slee.service1.co1">
				<para>
					definition of service
					<acronym>ID</acronym>
				</para>
			</callout>
			<callout arearefs="example.slee.service1.co2">
				<para>
					definition of root
					<acronym>SBB</acronym>
					.
					<acronym>SBB</acronym>
					is referenced by its
					<acronym>ID</acronym>
				</para>
			</callout>
			<callout arearefs="example.slee.service1.co3">
				<para>definition of services priority - it affects order of event
					routing in container</para>
			</callout>
		</calloutlist>
	</section>
	<section id="source_slee_library">
		<title><acronym>SLEE</acronym> Library</title>
		<para>Since there is no standard defined for communication between <acronym>USSD</acronym> gateway and service providing peers, &THIS.PLATFORM; &THIS.APPLICATION; Application defines its own standard for encoding.</para>
		<para>This <acronym>SLEE</acronym> library contains all classes required to properly encode and decode messages exchanged between  &THIS.PLATFORM; &THIS.APPLICATION; and service providing peers.
		Library itself is built on top of <acronym>JAXB</acronym> framework. </para>
		<note><para>Library is <acronym>SLEE</acronym> component, in other environments it is possible that it wont work properly. </para></note>
		<para>Standard is defined with single <acronym>XSD</acronym> file <filename>ussd.xsd</filename>. This file defines three types of encoded data: </para>
		<variablelist>	
		
		<varlistentry>
				<term>USSDDialogMessage</term>
				<listitem>
					<para>This structure is base for all messages exchanged between Gateway and application server. It conveys parameter which help to identify dialog and resources it addresses.</para>
					<mediaobject>
						<imageobject>
							<imagedata width="300px" align="center"
								fileref="images/ussd-library-dialog-message.png" format="PNG" />
						</imageobject>
						<caption>
							<para>USSD Dialog Message</para>
						</caption>
					</mediaobject>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>USSDMessage</term>
				<listitem>
					<para>This structure is base for all USSD messages exchanged between Gateway and application server. It adds USSD specific data.</para>
					<mediaobject>
						<imageobject>
							<imagedata width="300px" align="center"
								fileref="images/ussd-library-message.png" format="PNG" />
						</imageobject>
						<caption>
							<para>USSD Message</para>
						</caption>
					</mediaobject>
				</listitem>
			</varlistentry>
		
		
		
			<varlistentry>
				<term>USSDRequest</term>
				<listitem>
					<para>This structure conveys data sent from between peers, for instance: <literal>#123*</literal> or just simply <literal>3</literal> as subsequent request.
					It has fields to indicate relevant metadata to conveyed string.</para>
					<mediaobject>
						<imageobject>
							<imagedata width="300px" align="center"
								fileref="images/ussd-library-ussd-request.png" format="PNG" />
						</imageobject>
						<caption>
							<para>USSD Request</para>
						</caption>
					</mediaobject>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>USSDResponse</term>
				<listitem>
					<para>This structure indicates last message exchanged in dialog. It is standard USSD Message, however semantically it ends dialog. Its invoke ID MUST match invoke id from dialog initiating request.</para>
					<mediaobject>
						<imageobject>
							<imagedata width="300px" align="center"
								fileref="images/ussd-library-ussd-response.png" format="PNG" />
						</imageobject>
						<caption>
							<para>USSD Response</para>
						</caption>
					</mediaobject>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>USSDAbort</term>
				<listitem>
					<para><literal>Abort</literal> is used to indicate some sort of error. Its content <literal>MUST</literal> provide clue on error origination.</para>
					<mediaobject>
						<imageobject>
							<imagedata width="300px" align="center"
								fileref="images/ussd-library-abort.png" format="PNG" />
						</imageobject>
						<caption>
							<para>USSD Abort</para>
						</caption>
					</mediaobject>
					<para>
						Error details are encoded within abort reason as one of its values(exlusive):
					</para>
					<itemizedlist>
						<listitem>
							<para>userSpecific - simple string explaining application level error</para>
						</listitem>
						<listitem>
							<para>userResourceLimitation - simple string explaining application level out of resource error</para>
						</listitem>
						<listitem>
							<para>resourceUnavailable - enumeration type. It can have one of following values:</para>
							<itemizedlist>
								<listitem>
									<para>shortTermResourceLimitation</para>
								</listitem>
								<listitem>
									<para>longTermResourceLimitation</para>
								</listitem>
							</itemizedlist>
						</listitem>
						<listitem>
							<para>applicationProcedureCancellation - enumeration type. It can have one of following values:</para>
							<itemizedlist>
								<listitem>	
									<para>handoverCancellation</para>
								</listitem>
								<listitem>	
									<para>radioChannelRelease</para>
								</listitem>
								<listitem>	
									<para>networkPathRelease</para>
								</listitem>
								<listitem>	
									<para>callRelease</para>
								</listitem>
								<listitem>	
									<para>associatedProcedureFailure</para>
								</listitem>
								<listitem>	
									<para>tandemDialogueRelease</para>
								</listitem>
								<listitem>	
									<para>remoteOperationsFailure</para>
								</listitem>
							</itemizedlist>
						</listitem>
					</itemizedlist>
				</listitem>
			</varlistentry>
		</variablelist>
		<para>Library classes are plain <acronym>JAXB</acronym> <acronym>POJO</acronym>s. They are marshalled to <acronym>XML</acronym> form in standard way:</para>
		<programlisting language="Java" role="JAVA">
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;


import org.mobicents.ussdgateway.ObjectFactory;
import org.mobicents.ussdgateway.USSDAbort;
import org.mobicents.ussdgateway.USSDRequest;
import org.mobicents.ussdgateway.USSDResponse;



JAXBContext jAXBContext = JAXBContext.newInstance("org.mobicents.ussdgateway");
ObjectFactory objectFactory = new ObjectFactory();


USSDRequest req = this.objectFactory.createUSSDRequest();
req.setInvokeId(1);
req.setUssdCoding(0xFF);
req.setUssdString("#112*");
ByteArrayOutputStream bos = new ByteArrayOutputStream();

JAXBElement&lt;USSDRequest&gt; jxb = this.objectFactory.createRequest(req);
jAXBContext.createMarshaller().marshal(jxb, bos);

String xmlRequest = new String(bos.toByteArray());

Unmarshaller um = this.jAXBContext.createUnmarshaller();
JAXBElement o = (JAXBElement) um
		.unmarshal(new ByteArrayInputStream(xmlRequest));
if (o.getDeclaredType().equals(USSDRequest.class)) {
	//do something
} else if (o.getDeclaredType().equals(USSDResponse.class)) {
	//do something
} else if (o.getDeclaredType().equals(USSDAbort.class)) {
	//do something
}


		</programlisting>
		<note><para>InvokeId has constaraint on its value <literal>&lt;-128,127&gt;</literal> </para></note>
		<para>In <acronym>SLEE</acronym> components library is referenced as follows: </para>
		<programlisting lang="XML" role="XML"><![CDATA[
<library-ref>
	<library-name>library-ussdgateway</library-name>
	<library-vendor>org.mobicents</library-vendor>
	<library-version>2.0</library-version>
</library-ref>
		]]></programlisting>
	</section>
	
</section>	