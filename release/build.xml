<?xml version="1.0"?>
<project name="ussd.gw.release.sf" default="package" basedir=".">

	<property name="release.version" value="1.0.0.BETA1" />





	<property name="checkout.basedir" value="${basedir}/checkout" />
	<property name="config.dir" value="${basedir}/config" />
	<property name="release.name" value="point" />
	<property name="release.dir" value="${basedir}/${release.name}" />
	<property name="zip.dir" value="${release.dir}" />
	<property name="zip.file.destination.dir" value="${basedir}/upload" />
	<property name="zip.file.name" value="ussd-gateway-${release.version}" />
	<property name="failoncopy" value="true" />
	<property name="test.skip" value="true" />
	<property name="ussdgw.deploy.dir" value="mobicents-ussd-gateway" />
	<property name="ussdgw.dir" value="ussdgateway" />

	<!-- JBOSS -->
	<property name="jboss.version" value="5.1.0.GA" />
	<property name="jboss.dir" value="jboss-${jboss.version}" />
	<property name="jboss.distro.zip.path" value="jboss-${jboss.version}.zip" />
	<property name="jboss.home.relative.path" value="jboss-${jboss.version}/" />
	<property name="jboss.home" value="${release.dir}/${jboss.home.relative.path}" />
	<property name="jboss.config" value="default" />

	<!-- profile names -->
	<property name="profile.examples" value="examples" />
	<property name="profile.ussd" value="ussd" />

	<!-- SS7 -->
	<property name="ss7.version" value="1.0.0.CR1" />
	<property name="ss7.short.version" value="1.0.0.CR1" />
	<property name="ss7.download.url" value="http://downloads.sourceforge.net/project/mobicents/Mobicents%20Protocols%20Suite/${ss7.short.version}/mobicents-ss7-${ss7.version}.zip" />
	<property name="ss7.distro.zip" value="mobicents-ss7.zip" />
	<property name="ss7.distro.zip.path" value="${basedir}" />
	<property name="ss7.service.dir" value="mobicents-ss7-service" />


	<!-- JSLEE -->
	<property name="jslee.version" value="2.5.0.FINAL" />
	<property name="jslee.download.url" value="http://downloads.sourceforge.net/project/mobicents/Mobicents%20JAIN%20SLEE%20Server/${jslee.version}/mobicents-jainslee-${jslee.version}-jboss-5.1.0.GA.zip" />
	<property name="jslee.distro.zip" value="mobicents-jslee.zip" />
	<property name="jslee.distro.zip.path" value="${basedir}" />

	<!-- SS7 Simulator -->
	<property name="ss7.simulator.version" value="1.0.0.BETA1" />
	
	<!-- Examples -->
	<property name="example.version" value="1.0.0.BETA1"/>
	<!-- DOCS -->
	<property name="docs.profile" value="mobicents" />

	<!-- JSLEE DIRS for src build, required for trunk snapshot builds -->
	<property name="ra.dirs" value="http-servlet,map,sip11,http-client" />
	<!--
	<property name="example.dirs" value="ussd" />
	-->
	<property environment="sys" />
	<condition property="mvn.executable" value="${sys.M2_HOME}\bin\mvn.bat" else="mvn">
		<os family="windows" />
	</condition>

	<taskdef onerror="fail" resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="${sussd.gw.release.sf}/../ant-contrib-1.0b3.jar" />
		</classpath>
	</taskdef>

	<target name="init"  description="Initilizes some properties and performs checks to ensure build will complete.">
		<echo message="Java Version: ${java.version}" />
		<echo message="Java home: ${java.home}" />
		<echo message="JBoss home: ${jboss.home}" />
		<fail message="Unsupported Java version: ${java.version}. Make sure that the version of the Java compiler is 1.7 (7.0) or greater.">
			<condition>
				<not>
					<or>
						<contains string="${java.version}" substring="1.7" casesensitive="false" />
					</or>
				</not>
			</condition>
		</fail>
	</target>

	<target name="package" depends="clean,init,checkout,get-binary-releases,build,deploy,notes,zip" description="Default target, performs all required steps to create zip files with source code and binary release."/>

	<target name="clean" description="Default clean target. Removes all compiled, checked out or localy created resources.">
		<delete dir="${checkout.basedir}" />
		<delete dir="${release.dir}" />
		<delete dir="${zip.file.destination.dir}" />
	</target>

	<target name="clean-downloads" description="Removes binary downloads which are used to build this release. By default zip files are not removed, to save time.">
		<delete file="${ss7.distro.zip.path}/${ss7.distro.zip}" />
		<delete file="${jslee.distro.zip.path}/${jslee.distro.zip}" />
	</target>

	<target name="get-binary-releases" depends="get-jslee,get-ss7,unzip-jslee,unzip-ss7" description="Fetches binary release. Essetnailly downloads them from sourceforge."/>

	<!-- CHEOCKOUT -->

	<target name="checkout"  depends="checkout-sources" description="Performs initialization and checks out source from svn - tag or trunk version, depending on pom.xml content."/>

	<target name="checkout-sources">
		<echo>Checking out sources</echo>
		<exec executable="${mvn.executable}" dir="${ant.file.mobicents.release}/../">
			<arg line="validate -Pcheckout -Dcheckout.dir=${checkout.basedir}" />
		</exec>
	</target>

	<!-- GETs for binary parts -->
	<available file="${ss7.distro.zip}" filepath="${ss7.distro.zip.path}" property="got.ss7" />
	<target name="get-ss7" unless="got.ss7">
		<echo>Downloading Mobicents SS7: {ss7.distro.zip.path}/{ss7.distro.zip}</echo>
		<get dest="${ss7.distro.zip.path}/${ss7.distro.zip}" src="${ss7.download.url}" />
	</target>

	<target name="unzip-ss7">
		<delete dir="${checkout.basedir}/ss7" failonerror="false" />
		<unzip src="${ss7.distro.zip.path}/${ss7.distro.zip}" dest="${checkout.basedir}/ss7" />
	</target>

	<available file="${jslee.distro.zip}" filepath="${jslee.distro.zip.path}" property="got.jslee" />
	<target name="get-jslee" unless="got.jslee">
		<echo>Downloading Mobicents JSLEE: ${jslee.distro.zip.path}/${jslee.distro.zip}</echo>
		<get dest="${jslee.distro.zip.path}/${jslee.distro.zip}" src="${jslee.download.url}" />
	</target>

	<target name="unzip-jslee">
		<delete dir="${checkout.basedir}/jslee" failonerror="false" />
		<unzip src="${jslee.distro.zip.path}/${jslee.distro.zip}" dest="${checkout.basedir}/jslee" />
	</target>


	<!-- BUILD -->
	<target name="build" description="Builds components sources and everything associated." depends="build-sources" />

	<target name="build-sources" depends="build-simulator,build-ras,build-examples,build-gw">

	</target>
	<target name="build-simulator">

		<ant antfile="build.xml" inheritall="false" dir="${checkout.basedir}/simulator">
			<property name="release.name" value="${release.name}" />
			<property name="release.dir" value="${release.dir}/tmp/simulator" />
			<property name="docs.profile" value="${docs.profile}" />
		</ant>
		<move todir="${release.dir}/user-guide/simulator">
			<fileset dir="${release.dir}/tmp/simulator/user-guide" />
		</move>
		<move todir="${release.dir}/simulator">
			<fileset dir="${release.dir}/tmp/simulator/simulator" />
		</move>
		<move todir="${release.dir}/simulator">
			<fileset file="${release.dir}/tmp/simulator/README.TXT" />
		</move>
		<delete dir="${release.dir}/tmp" />
		<!-- -Dassemble.dir=${assemble.dir} -->
	</target>

	<target name="build-ras" depends="build-ras-configuration" description="Resource adaptors.">
		<!-- this will build RAs and move them to dir, later on we will deploy -->
		<for delimiter="," param="dir.name" list="${ra.dirs}">
			<sequential>
				<echo>Packaging RA for release from DIR[${checkout.basedir}/jain-slee/resources/@{dir.name}]</echo>
				<exec failonerror="true" executable="${mvn.executable}" dir="${checkout.basedir}/jain-slee/resources/@{dir.name}">
					<arg line="install  -Prelease,${docs.profile},set-svn-revision -Drelease.name=${release.name} -Ddocs.profile=${docs.profile} -Djboss.home=${release.dir}/tmp -Djboss.path=../../${jboss.home.relative.path} -Dnode=${jboss.config}" />
				</exec>

				<copy failonerror="true" toDir="${release.dir}/resources/@{dir.name}" overwrite="true">
					<fileset dir="${checkout.basedir}/jain-slee/release/${release.name}/resources/@{dir.name}" />
				</copy>

				<!--
				<move toDir="${checkout.basedir}/jain-slee/release/${release.name}/resources/@{dir.name}/user-guide" overwrite="true">
					<fileset dir="${checkout.basedir}/jain-slee/release/${release.name}/resources/@{dir.name}/docs" />
				</move>
				-->
			</sequential>
		</for>
		<delete dir="${release.dir}/tmp" />

	</target>
	<target name="build-ras-configuration">
		<!-- this is easier, we put new conf before builiding DU.... its easier than unzip, copy and zip again ... -->
		<echo>Altering RA configoration 'map'</echo>
		<copy file="${config.dir}/deploy-config.xml" todir="${checkout.basedir}/jain-slee/resources/map/du/src/main/resources/META-INF" overwrite="true" verbose="true"/>
	
	
	</target>
	<target name="build-examples">
		<!--
		<for delimiter="," param="dir.name" list="${example.dirs}">
			<sequential>
				<echo>Packaging Example for release from DIR[${checkout.basedir}/jain-slee/examples/@{dir.name}]</echo>
				<exec failonerror="true" executable="${mvn.executable}" dir="${checkout.basedir}/jain-slee/examples/@{dir.name}">
					<arg line="install -Prelease,${docs.profile},set-svn-revision -Drelease.name=${release.name} -Djboss.home=${release.dir}/tmp -Djboss.path=../../${jboss.home.relative.path} -Dnode=${jboss.config}" />
				</exec>
				<move toDir="${checkout.basedir}/jain-slee/release/${release.name}/@{dir.name}/user-guide/@{dir.name}" overwrite="true">
					<fileset dir="${checkout.basedir}/jain-slee/release/${release.name}/examples/@{dir.name}/docs" />
				</move>
				<copy failonerror="true" toDir="${release.dir}/examples/@{dir.name}" overwrite="true">
					<fileset dir="${checkout.basedir}/jain-slee/release/${release.name}/examples/@{dir.name}" />
				</copy>
			</sequential>
		</for>
		-->
		<echo>Packaging Example for release from DIR[${checkout.basedir}/jain-slee/examples/ussd]</echo>
		<exec failonerror="true" executable="${mvn.executable}" dir="${checkout.basedir}/jain-slee/examples/ussd">
			<arg line="install -Prelease,${docs.profile},set-svn-revision -Drelease.name=${release.name} -Djboss.home=${release.dir}/tmp -Djboss.path=../../${jboss.home.relative.path} -Dnode=${jboss.config}" />
		</exec>
		<move toDir="${checkout.basedir}/jain-slee/release/${release.name}/ussd/user-guide/ussd" overwrite="true">
			<fileset dir="${checkout.basedir}/jain-slee/release/${release.name}/examples/ussd/docs" />
		</move>
		<copy failonerror="true" toDir="${release.dir}/examples/ussd" overwrite="true">
			<fileset dir="${checkout.basedir}/jain-slee/release/${release.name}/examples/ussd" />
		</copy>

		<!-- copy local script for example, since... we predeploy RAs.... -->
		<copy verbose="true" failonerror="true" file="${config.dir}/example-build.xml" tofile="${release.dir}/examples/ussd/build.xml" overwrite="true">
			<filterchain>
				<replacetokens>
					<token key="NODE" value="${profile.examples}" />
					<token key="JBOSS_HOME" value="../../${jboss.home.relative.path}" />
					<token key="EXAMPLE_VERSION" value="${example.version}" />
				</replacetokens>
			</filterchain>
		</copy>
		<delete dir="${release.dir}/tmp" />

	</target>
	<target name="build-gw">
		<!-- TODO: check this, ${node} seems not set properly -->
		<exec failonerror="true" executable="${mvn.executable}" dir="${checkout.basedir}/ussdgateway">
			<arg line="install -Prelease,${docs.profile},set-svn-revision -Drelease.name=${release.name} -Djboss.home=${release.dir}/tmp_gw -Djboss.path=../../${jboss.home.relative.path} -Dnode=${jboss.config}" />
		</exec>
	</target>

	<target name="deploy" description="Copies and deploys everything that is in binary form to proper directories in ${release.name} directory.">
		<echo>Deploying RAs and services</echo>
		<antcall target="copy-jslee" />
		<antcall target="deploy-ss7" />
		<antcall target="deploy-ras" />
		<antcall target="deploy-gw" />
		<antcall target="deploy-config" />
	</target>

	<target name="copy-jslee">
		<echo>JSLEE resource beeing copied</echo>
		<delete dir="${release.dir}/${jboss.dir}" failonerror="false" />
		<!-- we dont fail -->
		<!-- copy deployed JSLEE, rename not needed nodes create those we need :D -->
		<copy failonerror="true" toDir="${release.dir}/${jboss.dir}" overwrite="true">
			<fileset dir="${checkout.basedir}/jslee/${jboss.dir}" />
		</copy>

		<copy failonerror="true" toDir="${release.dir}/${jboss.dir}/server/${profile.examples}" overwrite="true">
			<fileset dir="${release.dir}/${jboss.dir}/server/default" />
		</copy>
		<copy failonerror="true" toDir="${release.dir}/${jboss.dir}/server/${profile.ussd}" overwrite="true">
			<fileset dir="${release.dir}/${jboss.dir}/server/default" />
		</copy>

		<delete dir="${release.dir}/${jboss.dir}/server/all" />
		<delete dir="${release.dir}/${jboss.dir}/server/default" />
	</target>
	<target name="deploy-ss7">
		<echo>Deploying SS7 binary release.
			</echo>
		<ant dir="${checkout.basedir}/ss7/ss7" target="deploy">
			<property name="jboss.home" value="${release.dir}/${jboss.dir}" />
			<property name="node" value="${profile.ussd}" />
		</ant>

		<move todir="${release.dir}/${jboss.dir}/server/${profile.ussd}/deploy/a${ss7.service.dir}">
			<fileset dir="${release.dir}/${jboss.dir}/server/${profile.ussd}/deploy/${ss7.service.dir}" />
		</move>
		<echo>Deploying SS7 defualt configuration.
				</echo>
		<!-- add conf deploy -->
	</target>
	<target name="deploy-ras">
		<echo>Deploying JSLEE RAs
			</echo>
		<!-- GW RAs -->
		<ant dir="${release.dir}/resources/sip11" target="deploy">
			<property name="jboss.home" value="${release.dir}/${jboss.dir}" />
			<property name="node" value="${profile.ussd}" />
			<property name="jboss.config" value="${profile.ussd}" />

		</ant>
		<ant dir="${release.dir}/resources/http-client" target="deploy">
			<property name="jboss.home" value="${release.dir}/${jboss.dir}" />
			<property name="node" value="${profile.ussd}" />
			<property name="jboss.config" value="${profile.ussd}" />
		</ant>
		<ant dir="${release.dir}/resources/map" target="deploy">
			<property name="jboss.home" value="${release.dir}/${jboss.dir}" />
			<property name="node" value="${profile.ussd}" />
			<property name="jboss.config" value="${profile.ussd}" />
		</ant>

		<!-- exmaples -->
		<ant dir="${release.dir}/resources/sip11" target="deploy">
			<property name="jboss.home" value="${release.dir}/${jboss.dir}" />
			<property name="node" value="${profile.examples}" />
			<property name="jboss.config" value="${profile.examples}" />
		</ant>
		<!-- -->
		<ant dir="${release.dir}/resources/http-servlet" target="deploy">
			<property name="jboss.home" value="${release.dir}/${jboss.dir}" />
			<property name="node" value="${profile.examples}" />
			<property name="jboss.config" value="${profile.examples}" />
		</ant>

		<delete dir="${release.dir}/resources" />
	</target>
	<target name="deploy-gw">
		<move todir="${release.dir}/${jboss.dir}/server/${profile.ussd}/deploy/${ussdgw.deploy.dir}">
			<fileset dir="${release.dir}/tmp_gw/server/default/deploy/${ussdgw.deploy.dir}" />
		</move>

		<delete dir="${release.dir}/tmp_gw" />
	</target>
	<target name="deploy-config">
		<echo>Deploying default config</echo>
		<copy verbose="true" overwrite="true" failonerror="true" todir="${release.dir}/${jboss.dir}/server/${profile.ussd}/data">
			<fileset dir="${config.dir}">
				<include name="*.xml" />
				<exclude name="jboss-beans.xml" />
				<exclude name="example-build.xml" />
				<exclude name="deploy-config.xml" />
			</fileset>
		</copy>
		<copy verbose="true" overwrite="true" failonerror="true" todir="${release.dir}/${jboss.dir}/server/${profile.ussd}/deploy/a${ss7.service.dir}/META-INF">
			<fileset dir="${config.dir}">
				<exclude name="*.xml" />
				<exclude name="*.drl" />
				<include name="jboss-beans.xml" />
			</fileset>
		</copy>
		<copy verbose="true" overwrite="true" failonerror="true" todir="${release.dir}/${jboss.dir}/server/${profile.ussd}/deploy/${ussdgw.deploy.dir}/rules">
			<fileset dir="${config.dir}">
				<include name="USSDGateway.drl" />
			</fileset>
		</copy>
	</target>


	<target name="notes" description="Creates README.txt from template.">
		<copy verbose="true" failonerror="true" file="README.TXT" todir="${release.dir}">
			<filterchain>
				<replacetokens>
					<token key="SIMULATOR_VERSION" value="${ss7.simulator.version}" />
					<token key="VERSION" value="${release.version}" />
					<token key="SS7_VERSION" value="${ss7.version}" />
					<token key="JSLEE_VERSION" value="${jslee.version}" />
				</replacetokens>
			</filterchain>
		</copy>
	</target>

	<!-- ZIP targets -->

	<target name="zip" depends="zip-src,zip-gw" description="Create zip source and binary zip files."/>

	<target name="set-src-excludes">
		<defaultexcludes add="**/target/**" />
		<defaultexcludes add="**/docs/**" />
		<defaultexcludes add="**/legacy/**" />
		<defaultexcludes add="**/release/**" />
		<defaultexcludes add="**/logs/**" />
		<defaultexcludes add="**/tests/**" />
		<defaultexcludes add="**/${*}/**" />
		<defaultexcludes add="**/*JBOSS_HOME*/**" />
		<defaultexcludes add="**/*CATALINA_HOME*/**" />
		<defaultexcludes add="**/.gwt-cache/**" />
		<defaultexcludes add="**/.settings/**" />
		<defaultexcludes add="**/.project" />
		<defaultexcludes add="**/.classpath" />
		<defaultexcludes add="**/*.class" echo="true" />
	</target>

	<target name="zip-gw" description="">
		<fixcrlf srcdir="${jboss.home}/bin" includes="*.sh" eol="lf" eof="remove" />
		<zip destfile="${zip.file.destination.dir}/${zip.file.name}.zip" filesonly="false">
			<zipfileset dir="${release.dir}" filemode="755" includes="**/*.sh" />
			<zipfileset dir="${release.dir}" prefix="" excludes=" **/server/*/log/** **/server/*/tmp/** **/server/*/work/** **/server/tmp/**" />
		</zip>
		<antcall target="checksum">
			<param name="source.file" value="${zip.file.destination.dir}/${zip.file.name}.zip" />
			<param name="algorithm" value="sha1" />
		</antcall>
	</target>

	<target name="zip-src" depends="set-src-excludes">


		<zip destfile="${zip.file.destination.dir}/${zip.file.name}.src.zip" basedir="${checkout.basedir}/${ussdgw.dir}" />

		<antcall target="checksum">
			<param name="source.file" value="${zip.file.destination.dir}/${zip.file.name}.src.zip" />
			<param name="algorithm" value="sha1" />
		</antcall>


		<defaultexcludes default="true" />
	</target>

	<target name="checksum">
		<checksum file="${source.file}" algorithm="${algorithm}" fileext=".${algorithm}" forceOverwrite="yes" />
	</target>
</project>
